{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"AllTags\",\n  data() {\n    return {\n      tags: []\n    };\n  },\n  async mounted() {\n    await this.fetchTags();\n  },\n  methods: {\n    async fetchTags() {\n      await axios.get('http://localhost:9090/specialitylookup-all').then(response => {\n        let createArr = [{\n          specialityName: \"create\",\n          tags: ['create']\n        }];\n        this.tags = this.chunk([...createArr, ...response.data], 3);\n      });\n    },\n    async pushCreateSpeciality(spec) {\n      console.log('c');\n      await axios.post('http://localhost:9090/specialitylookup', {\n        spec\n      }).then(response => {\n        console.log(response);\n      });\n    },\n    async pushTags(id, tag) {\n      console.log('c');\n      await axios.post('http://localhost:9090/addtag', {\n        \"_id\": id,\n        \"tags\": tag\n      }).then(response => {\n        console.log(response);\n      });\n    },\n    chunk(arr, chunkSize) {\n      if (chunkSize <= 0) throw \"Invalid chunk size\";\n      let R = [];\n      for (let i = 0, len = arr.length; i < len; i += chunkSize) R.push(arr.slice(i, i + chunkSize));\n      return R;\n    }\n  }\n};","map":{"version":3,"mappings":";AAuCA;AAEA;EACAA;EACAC;IACA;MACAC;IACA;EACA;EACA;IACA;EACA;EACAC;IACA;MACA;QACA;UAAAC;UAAAF;QAAA;QACA;MACA;IACA;IACA;MACAG;MACA;QACAC;MACA;QACAD;MACA;IACA;IACA;MACAA;MACA;QACA;QACA;MACA;QACAA;MACA;IACA;IACAE;MACA;MACA;MACA,2DACAC;MACA;IACA;EACA;AACA","names":["name","data","tags","methods","specialityName","console","spec","chunk","R"],"sourceRoot":"src/views","sources":["AllTags.vue"],"sourcesContent":["<template>\n  <div>\n    {{tags}}\n    <v-container>\n      <v-row v-for=\"(row, indexrow) in tags\" :key=\"indexrow\" no-gutters>\n        <v-col v-for=\"(tag, indextag) in row\" :key=\"indextag\" style=\"max-width: 390px; padding: 15px\">\n\n          <v-card class=\"grey lighten-5\" elevation=\"5\" v-if=\"tag.specialityName === 'create'\">\n            <v-container>\n              <v-text-field placeholder=\"Create new speciality...\"></v-text-field>\n            </v-container>\n            <br><br><br><br>\n            <v-card-actions class=\"pt-0\">\n              <v-btn text color=\"teal accent-4\">Submit </v-btn>\n            </v-card-actions>\n          </v-card>\n\n\n          <v-card class=\"grey lighten-5\" elevation=\"5\" v-else>\n            <v-card-title>{{tag.specialityName}}</v-card-title>\n            <v-card-subtitle>{{tag.tags.join(', ')}}</v-card-subtitle>\n            {{tag.txtModel}}\n            <v-container style=\"padding: 20px\">\n              <v-text-field v-on:submit=\"pushTags(tag._id, tag.txtModel)\" v-model=\"tag.txtModel\" placeholder=\"Add new tag...\"></v-text-field>\n            </v-container>\n            <v-card-actions class=\"pt-0\">\n              <v-btn v-on:click=\"pushTags(tag._id, tag.txtModel)\" text color=\"teal accent-4\" >Submit </v-btn>\n            </v-card-actions>\n          </v-card>\n\n\n        </v-col>\n      </v-row>\n    </v-container>\n  </div>\n\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"AllTags\",\n  data () {\n    return {\n      tags: []\n    }\n  },\n  async mounted() {\n    await this.fetchTags()\n  },\n  methods : {\n    async fetchTags() {\n      await axios.get('http://localhost:9090/specialitylookup-all').then(response => {\n          let createArr = [{specialityName : \"create\", tags : ['create']}];\n          this.tags = this.chunk([...createArr, ...response.data], 3)\n      });\n    },\n    async pushCreateSpeciality(spec) {\n      console.log('c')\n      await axios.post('http://localhost:9090/specialitylookup', {\n        spec\n      }).then(response => {\n        console.log(response);\n      });\n    },\n    async pushTags(id, tag) {\n      console.log('c')\n      await axios.post('http://localhost:9090/addtag', {\n        \"_id\" : id,\n        \"tags\" : tag,\n      }).then(response => {\n        console.log(response);\n      });\n    },\n    chunk(arr, chunkSize) {\n      if (chunkSize <= 0) throw \"Invalid chunk size\";\n      let R = [];\n      for (let i=0,len=arr.length; i<len; i+=chunkSize)\n        R.push(arr.slice(i,i+chunkSize));\n      return R;\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module"}